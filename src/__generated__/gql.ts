/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
import * as types from './graphql';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
	'\n  mutation ApproveSubmission($programShortName: String!, $submissionVersion: String!) {\n    approveClinicalSubmission(programShortName: $programShortName, version: $submissionVersion)\n  }\n':
		types.ApproveSubmissionDocument,
	'\n  mutation ClearClinicalRegistration($shortName: String!, $registrationId: String!) {\n    clearClinicalRegistration(shortName: $shortName, registrationId: $registrationId)\n  }\n':
		types.ClearClinicalRegistrationDocument,
	'\n  mutation ClearSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n    $fileType: String\n  ) {\n    clearClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n      fileType: $fileType\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n':
		types.ClearSubmissionDocument,
	'\n\tquery ClinicalEntityData($programShortName: String!, $filters: ClinicalInput!) {\n\t\tclinicalData(programShortName: $programShortName, filters: $filters) {\n\t\t\tprogramShortName\n\t\t\tclinicalEntities {\n\t\t\t\tentityName\n\t\t\t\tentityFields\n\t\t\t\ttotalDocs\n\t\t\t\trecords {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tcompletionStats {\n\t\t\t\t\tcoreCompletion {\n\t\t\t\t\t\tdonor\n\t\t\t\t\t\tspecimens\n\t\t\t\t\t\tprimaryDiagnosis\n\t\t\t\t\t\tfollowUps\n\t\t\t\t\t\ttreatments\n\t\t\t\t\t}\n\t\t\t\t\tcoreCompletionDate\n\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\toverriddenCoreCompletion\n\t\t\t\t\tdonorId\n\t\t\t\t\tentityData {\n\t\t\t\t\t\tspecimens {\n\t\t\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\t\t\tnormalSpecimensPercentage\n\t\t\t\t\t\t\ttumourSpecimensPercentage\n\t\t\t\t\t\t\tnormalRegistrations\n\t\t\t\t\t\t\tnormalSubmissions\n\t\t\t\t\t\t\ttumourRegistrations\n\t\t\t\t\t\t\ttumourSubmissions\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclinicalErrors {\n\t\t\t\tdonorId\n\t\t\t\tsubmitterDonorId\n\t\t\t\terrors {\n\t\t\t\t\terrorType\n\t\t\t\t\tfieldName\n\t\t\t\t\tindex\n\t\t\t\t\tinfo {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tmessage\n\t\t\t\t\tentityName\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n':
		types.ClinicalEntityDataDocument,
	'\n  query ClinicalEntitySearchResults($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalSearchResults(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      totalResults\n      searchResults {\n        donorId\n        submitterDonorId\n      }\n    }\n  }\n':
		types.ClinicalEntitySearchResultsDocument,
	'\n  query ClinicalSchemaVersion {\n    clinicalSubmissionSchemaVersion\n  }\n':
		types.ClinicalSchemaVersionDocument,
	'\n\tfragment ClinicalSubmissionFragment on ClinicalSubmissionData {\n\t\tprogramShortName # this is the ID\n\t\tstate\n\t\tversion\n\t\tupdatedAt\n\t\tupdatedBy\n\t\tclinicalEntities {\n\t\t\tclinicalType\n\t\t\tbatchName\n\t\t\tcreator\n\t\t\tcreatedAt\n\t\t\tstats {\n\t\t\t\tnoUpdate\n\t\t\t\tnew\n\t\t\t\tupdated\n\t\t\t\terrorsFound\n\t\t\t}\n\t\t\trecords {\n\t\t\t\trow\n\t\t\t\tfields {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataUpdates {\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tnewValue\n\t\t\t\toldValue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataWarnings {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tschemaErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t}\n':
		types.ClinicalSubmissionFragmentFragmentDoc,
	'\n  query ClinicalSubmission($shortName: String!) {\n    clinicalSubmissions(programShortName: $shortName) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n':
		types.ClinicalSubmissionDocument,
	'\n  query ClinicalSubmissionSystemDisabled {\n    clinicalSubmissionSystemDisabled\n  }\n':
		types.ClinicalSubmissionSystemDisabledDocument,
	'\n  mutation CommitClinicalRegistration(\n    $shortName: String!\n    $registrationId: String!\n  ) {\n    commitClinicalRegistration(\n      shortName: $shortName\n      registrationId: $registrationId\n    )\n  }\n':
		types.CommitClinicalRegistrationDocument,
	'\n  query GetRegistration($shortName: String!) {\n    clinicalRegistration(shortName: $shortName) {\n      id\n      programShortName\n      creator\n      fileName\n      createdAt\n      records {\n        row\n        fields {\n          name\n          value\n        }\n      }\n      errors {\n        type\n        message\n        row\n        field\n        value\n        sampleId\n        donorId\n        specimenId\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n      newDonors {\n        count\n        rows\n      }\n      newSpecimens {\n        count\n        rows\n      }\n      newSamples {\n        count\n        rows\n      }\n      alreadyRegistered {\n        count\n        rows\n      }\n    }\n  }\n':
		types.GetRegistrationDocument,
	'\n\tquery ProgramsList($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t\tname\n\t\t\tcancerTypes\n\t\t\tcountries\n\t\t\tdataCenter {\n\t\t\t\tshortName\n\t\t\t}\n\t\t\tmembershipType\n\t\t\tgenomicDonors\n\t\t\tsubmittedDonors\n\t\t\tcommitmentDonors\n\t\t}\n\t}\n':
		types.ProgramsListDocument,
	'\n\tfragment Registration on ClinicalRegistrationData {\n\t\tid\n\t\tprogramShortName\n\t\tcreator\n\t\tfileName\n\t\tcreatedAt\n\t\trecords {\n\t\t\trow\n\t\t\tfields {\n\t\t\t\tname\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\terrors {\n\t\t\ttype\n\t\t\tmessage\n\t\t\trow\n\t\t\tfield\n\t\t\tvalue\n\t\t\tsampleId\n\t\t\tdonorId\n\t\t\tspecimenId\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t\tnewDonors {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSpecimens {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSamples {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\talreadyRegistered {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t}\n':
		types.RegistrationFragmentDoc,
	'\n  mutation ReopenSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: reopenClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n':
		types.ReopenSubmissionDocument,
	'\n\tquery SideMenu ($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t}\n  }\n':
		types.SideMenuDocument,
	'\n\tquery SideMenuProgramStatus($activeProgramName: String!, $filters: ClinicalInput!) {\n\t clinicalRegistration(shortName: $activeProgramName) {\n      programShortName\n      fileErrors {\n        message\n        code\n      }\n      fileName\n      errors {\n        type\n      }\n\t\t}\n    clinicalSubmissions(programShortName: $activeProgramName) {\n      programShortName\n      state\n      clinicalEntities {\n        schemaErrors {\n          row\n        }\n      }\n    }\n    clinicalData(programShortName: $activeProgramName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    } \n  }\n':
		types.SideMenuProgramStatusDocument,
	'\n  mutation SignOffSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: commitClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n':
		types.SignOffSubmissionDocument,
	'\n  query SubmittedDataSideMenu($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalData(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    }\n  }\n':
		types.SubmittedDataSideMenuDocument,
	'\n  mutation UploadClinicalSubmission($programShortName: String!, $files: [Upload!]) {\n    uploadClinicalSubmissions(\n      programShortName: $programShortName\n      clinicalFiles: $files\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n':
		types.UploadClinicalSubmissionDocument,
	'\n  mutation UploadRegistration($shortName: String!, $registrationFile: Upload!) {\n    uploadClinicalRegistration(\n      shortName: $shortName\n      registrationFile: $registrationFile\n    ) {\n      id\n    programShortName\n    creator\n    fileName\n    createdAt\n    records {\n      row\n      fields {\n        name\n        value\n      }\n    }\n    errors {\n      type\n      message\n      row\n      field\n      value\n      sampleId\n      donorId\n      specimenId\n    }\n    fileErrors {\n      message\n      fileNames\n      code\n    }\n    newDonors {\n      count\n      rows\n    }\n    newSpecimens {\n      count\n      rows\n    }\n    newSamples {\n      count\n      rows\n    }\n    alreadyRegistered {\n      count\n      rows\n    }\n    }\n  }\n':
		types.UploadRegistrationDocument,
	'\n  mutation ValidateSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    validateClinicalSubmissions(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }    \n    }\n    \n  }\n':
		types.ValidateSubmissionDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation ApproveSubmission($programShortName: String!, $submissionVersion: String!) {\n    approveClinicalSubmission(programShortName: $programShortName, version: $submissionVersion)\n  }\n',
): (typeof documents)['\n  mutation ApproveSubmission($programShortName: String!, $submissionVersion: String!) {\n    approveClinicalSubmission(programShortName: $programShortName, version: $submissionVersion)\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation ClearClinicalRegistration($shortName: String!, $registrationId: String!) {\n    clearClinicalRegistration(shortName: $shortName, registrationId: $registrationId)\n  }\n',
): (typeof documents)['\n  mutation ClearClinicalRegistration($shortName: String!, $registrationId: String!) {\n    clearClinicalRegistration(shortName: $shortName, registrationId: $registrationId)\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation ClearSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n    $fileType: String\n  ) {\n    clearClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n      fileType: $fileType\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation ClearSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n    $fileType: String\n  ) {\n    clearClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n      fileType: $fileType\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tquery ClinicalEntityData($programShortName: String!, $filters: ClinicalInput!) {\n\t\tclinicalData(programShortName: $programShortName, filters: $filters) {\n\t\t\tprogramShortName\n\t\t\tclinicalEntities {\n\t\t\t\tentityName\n\t\t\t\tentityFields\n\t\t\t\ttotalDocs\n\t\t\t\trecords {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tcompletionStats {\n\t\t\t\t\tcoreCompletion {\n\t\t\t\t\t\tdonor\n\t\t\t\t\t\tspecimens\n\t\t\t\t\t\tprimaryDiagnosis\n\t\t\t\t\t\tfollowUps\n\t\t\t\t\t\ttreatments\n\t\t\t\t\t}\n\t\t\t\t\tcoreCompletionDate\n\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\toverriddenCoreCompletion\n\t\t\t\t\tdonorId\n\t\t\t\t\tentityData {\n\t\t\t\t\t\tspecimens {\n\t\t\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\t\t\tnormalSpecimensPercentage\n\t\t\t\t\t\t\ttumourSpecimensPercentage\n\t\t\t\t\t\t\tnormalRegistrations\n\t\t\t\t\t\t\tnormalSubmissions\n\t\t\t\t\t\t\ttumourRegistrations\n\t\t\t\t\t\t\ttumourSubmissions\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclinicalErrors {\n\t\t\t\tdonorId\n\t\t\t\tsubmitterDonorId\n\t\t\t\terrors {\n\t\t\t\t\terrorType\n\t\t\t\t\tfieldName\n\t\t\t\t\tindex\n\t\t\t\t\tinfo {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tmessage\n\t\t\t\t\tentityName\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery ClinicalEntityData($programShortName: String!, $filters: ClinicalInput!) {\n\t\tclinicalData(programShortName: $programShortName, filters: $filters) {\n\t\t\tprogramShortName\n\t\t\tclinicalEntities {\n\t\t\t\tentityName\n\t\t\t\tentityFields\n\t\t\t\ttotalDocs\n\t\t\t\trecords {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t\tcompletionStats {\n\t\t\t\t\tcoreCompletion {\n\t\t\t\t\t\tdonor\n\t\t\t\t\t\tspecimens\n\t\t\t\t\t\tprimaryDiagnosis\n\t\t\t\t\t\tfollowUps\n\t\t\t\t\t\ttreatments\n\t\t\t\t\t}\n\t\t\t\t\tcoreCompletionDate\n\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\toverriddenCoreCompletion\n\t\t\t\t\tdonorId\n\t\t\t\t\tentityData {\n\t\t\t\t\t\tspecimens {\n\t\t\t\t\t\t\tcoreCompletionPercentage\n\t\t\t\t\t\t\tnormalSpecimensPercentage\n\t\t\t\t\t\t\ttumourSpecimensPercentage\n\t\t\t\t\t\t\tnormalRegistrations\n\t\t\t\t\t\t\tnormalSubmissions\n\t\t\t\t\t\t\ttumourRegistrations\n\t\t\t\t\t\t\ttumourSubmissions\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tclinicalErrors {\n\t\t\t\tdonorId\n\t\t\t\tsubmitterDonorId\n\t\t\t\terrors {\n\t\t\t\t\terrorType\n\t\t\t\t\tfieldName\n\t\t\t\t\tindex\n\t\t\t\t\tinfo {\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t\tmessage\n\t\t\t\t\tentityName\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query ClinicalEntitySearchResults($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalSearchResults(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      totalResults\n      searchResults {\n        donorId\n        submitterDonorId\n      }\n    }\n  }\n',
): (typeof documents)['\n  query ClinicalEntitySearchResults($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalSearchResults(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      totalResults\n      searchResults {\n        donorId\n        submitterDonorId\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query ClinicalSchemaVersion {\n    clinicalSubmissionSchemaVersion\n  }\n',
): (typeof documents)['\n  query ClinicalSchemaVersion {\n    clinicalSubmissionSchemaVersion\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tfragment ClinicalSubmissionFragment on ClinicalSubmissionData {\n\t\tprogramShortName # this is the ID\n\t\tstate\n\t\tversion\n\t\tupdatedAt\n\t\tupdatedBy\n\t\tclinicalEntities {\n\t\t\tclinicalType\n\t\t\tbatchName\n\t\t\tcreator\n\t\t\tcreatedAt\n\t\t\tstats {\n\t\t\t\tnoUpdate\n\t\t\t\tnew\n\t\t\t\tupdated\n\t\t\t\terrorsFound\n\t\t\t}\n\t\t\trecords {\n\t\t\t\trow\n\t\t\t\tfields {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataUpdates {\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tnewValue\n\t\t\t\toldValue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataWarnings {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tschemaErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t}\n',
): (typeof documents)['\n\tfragment ClinicalSubmissionFragment on ClinicalSubmissionData {\n\t\tprogramShortName # this is the ID\n\t\tstate\n\t\tversion\n\t\tupdatedAt\n\t\tupdatedBy\n\t\tclinicalEntities {\n\t\t\tclinicalType\n\t\t\tbatchName\n\t\t\tcreator\n\t\t\tcreatedAt\n\t\t\tstats {\n\t\t\t\tnoUpdate\n\t\t\t\tnew\n\t\t\t\tupdated\n\t\t\t\terrorsFound\n\t\t\t}\n\t\t\trecords {\n\t\t\t\trow\n\t\t\t\tfields {\n\t\t\t\t\tname\n\t\t\t\t\tvalue\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataUpdates {\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tnewValue\n\t\t\t\toldValue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataWarnings {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tdataErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t\tschemaErrors {\n\t\t\t\tmessage\n\t\t\t\trow\n\t\t\t\tfield\n\t\t\t\tvalue\n\t\t\t\tdonorId\n\t\t\t}\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query ClinicalSubmission($shortName: String!) {\n    clinicalSubmissions(programShortName: $shortName) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n',
): (typeof documents)['\n  query ClinicalSubmission($shortName: String!) {\n    clinicalSubmissions(programShortName: $shortName) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query ClinicalSubmissionSystemDisabled {\n    clinicalSubmissionSystemDisabled\n  }\n',
): (typeof documents)['\n  query ClinicalSubmissionSystemDisabled {\n    clinicalSubmissionSystemDisabled\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation CommitClinicalRegistration(\n    $shortName: String!\n    $registrationId: String!\n  ) {\n    commitClinicalRegistration(\n      shortName: $shortName\n      registrationId: $registrationId\n    )\n  }\n',
): (typeof documents)['\n  mutation CommitClinicalRegistration(\n    $shortName: String!\n    $registrationId: String!\n  ) {\n    commitClinicalRegistration(\n      shortName: $shortName\n      registrationId: $registrationId\n    )\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query GetRegistration($shortName: String!) {\n    clinicalRegistration(shortName: $shortName) {\n      id\n      programShortName\n      creator\n      fileName\n      createdAt\n      records {\n        row\n        fields {\n          name\n          value\n        }\n      }\n      errors {\n        type\n        message\n        row\n        field\n        value\n        sampleId\n        donorId\n        specimenId\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n      newDonors {\n        count\n        rows\n      }\n      newSpecimens {\n        count\n        rows\n      }\n      newSamples {\n        count\n        rows\n      }\n      alreadyRegistered {\n        count\n        rows\n      }\n    }\n  }\n',
): (typeof documents)['\n  query GetRegistration($shortName: String!) {\n    clinicalRegistration(shortName: $shortName) {\n      id\n      programShortName\n      creator\n      fileName\n      createdAt\n      records {\n        row\n        fields {\n          name\n          value\n        }\n      }\n      errors {\n        type\n        message\n        row\n        field\n        value\n        sampleId\n        donorId\n        specimenId\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n      newDonors {\n        count\n        rows\n      }\n      newSpecimens {\n        count\n        rows\n      }\n      newSamples {\n        count\n        rows\n      }\n      alreadyRegistered {\n        count\n        rows\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tquery ProgramsList($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t\tname\n\t\t\tcancerTypes\n\t\t\tcountries\n\t\t\tdataCenter {\n\t\t\t\tshortName\n\t\t\t}\n\t\t\tmembershipType\n\t\t\tgenomicDonors\n\t\t\tsubmittedDonors\n\t\t\tcommitmentDonors\n\t\t}\n\t}\n',
): (typeof documents)['\n\tquery ProgramsList($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t\tname\n\t\t\tcancerTypes\n\t\t\tcountries\n\t\t\tdataCenter {\n\t\t\t\tshortName\n\t\t\t}\n\t\t\tmembershipType\n\t\t\tgenomicDonors\n\t\t\tsubmittedDonors\n\t\t\tcommitmentDonors\n\t\t}\n\t}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tfragment Registration on ClinicalRegistrationData {\n\t\tid\n\t\tprogramShortName\n\t\tcreator\n\t\tfileName\n\t\tcreatedAt\n\t\trecords {\n\t\t\trow\n\t\t\tfields {\n\t\t\t\tname\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\terrors {\n\t\t\ttype\n\t\t\tmessage\n\t\t\trow\n\t\t\tfield\n\t\t\tvalue\n\t\t\tsampleId\n\t\t\tdonorId\n\t\t\tspecimenId\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t\tnewDonors {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSpecimens {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSamples {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\talreadyRegistered {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t}\n',
): (typeof documents)['\n\tfragment Registration on ClinicalRegistrationData {\n\t\tid\n\t\tprogramShortName\n\t\tcreator\n\t\tfileName\n\t\tcreatedAt\n\t\trecords {\n\t\t\trow\n\t\t\tfields {\n\t\t\t\tname\n\t\t\t\tvalue\n\t\t\t}\n\t\t}\n\t\terrors {\n\t\t\ttype\n\t\t\tmessage\n\t\t\trow\n\t\t\tfield\n\t\t\tvalue\n\t\t\tsampleId\n\t\t\tdonorId\n\t\t\tspecimenId\n\t\t}\n\t\tfileErrors {\n\t\t\tmessage\n\t\t\tfileNames\n\t\t\tcode\n\t\t}\n\t\tnewDonors {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSpecimens {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\tnewSamples {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t\talreadyRegistered {\n\t\t\tcount\n\t\t\trows\n\t\t}\n\t}\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation ReopenSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: reopenClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation ReopenSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: reopenClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tquery SideMenu ($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t}\n  }\n',
): (typeof documents)['\n\tquery SideMenu ($dataCenter: String) {\n\t\tprograms(dataCenter: $dataCenter) {\n\t\t\tshortName\n\t\t}\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n\tquery SideMenuProgramStatus($activeProgramName: String!, $filters: ClinicalInput!) {\n\t clinicalRegistration(shortName: $activeProgramName) {\n      programShortName\n      fileErrors {\n        message\n        code\n      }\n      fileName\n      errors {\n        type\n      }\n\t\t}\n    clinicalSubmissions(programShortName: $activeProgramName) {\n      programShortName\n      state\n      clinicalEntities {\n        schemaErrors {\n          row\n        }\n      }\n    }\n    clinicalData(programShortName: $activeProgramName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    } \n  }\n',
): (typeof documents)['\n\tquery SideMenuProgramStatus($activeProgramName: String!, $filters: ClinicalInput!) {\n\t clinicalRegistration(shortName: $activeProgramName) {\n      programShortName\n      fileErrors {\n        message\n        code\n      }\n      fileName\n      errors {\n        type\n      }\n\t\t}\n    clinicalSubmissions(programShortName: $activeProgramName) {\n      programShortName\n      state\n      clinicalEntities {\n        schemaErrors {\n          row\n        }\n      }\n    }\n    clinicalData(programShortName: $activeProgramName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    } \n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation SignOffSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: commitClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation SignOffSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    clinicalSubmissions: commitClinicalSubmission(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  query SubmittedDataSideMenu($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalData(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    }\n  }\n',
): (typeof documents)['\n  query SubmittedDataSideMenu($programShortName: String!, $filters: ClinicalInput!) {\n    clinicalData(programShortName: $programShortName, filters: $filters) {\n      programShortName\n      clinicalEntities {\n        entityName\n      }\n      clinicalErrors {\n        errors {\n          entityName\n        }\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation UploadClinicalSubmission($programShortName: String!, $files: [Upload!]) {\n    uploadClinicalSubmissions(\n      programShortName: $programShortName\n      clinicalFiles: $files\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n',
): (typeof documents)['\n  mutation UploadClinicalSubmission($programShortName: String!, $files: [Upload!]) {\n    uploadClinicalSubmissions(\n      programShortName: $programShortName\n      clinicalFiles: $files\n    ) {\n      programShortName # this is the ID\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation UploadRegistration($shortName: String!, $registrationFile: Upload!) {\n    uploadClinicalRegistration(\n      shortName: $shortName\n      registrationFile: $registrationFile\n    ) {\n      id\n    programShortName\n    creator\n    fileName\n    createdAt\n    records {\n      row\n      fields {\n        name\n        value\n      }\n    }\n    errors {\n      type\n      message\n      row\n      field\n      value\n      sampleId\n      donorId\n      specimenId\n    }\n    fileErrors {\n      message\n      fileNames\n      code\n    }\n    newDonors {\n      count\n      rows\n    }\n    newSpecimens {\n      count\n      rows\n    }\n    newSamples {\n      count\n      rows\n    }\n    alreadyRegistered {\n      count\n      rows\n    }\n    }\n  }\n',
): (typeof documents)['\n  mutation UploadRegistration($shortName: String!, $registrationFile: Upload!) {\n    uploadClinicalRegistration(\n      shortName: $shortName\n      registrationFile: $registrationFile\n    ) {\n      id\n    programShortName\n    creator\n    fileName\n    createdAt\n    records {\n      row\n      fields {\n        name\n        value\n      }\n    }\n    errors {\n      type\n      message\n      row\n      field\n      value\n      sampleId\n      donorId\n      specimenId\n    }\n    fileErrors {\n      message\n      fileNames\n      code\n    }\n    newDonors {\n      count\n      rows\n    }\n    newSpecimens {\n      count\n      rows\n    }\n    newSamples {\n      count\n      rows\n    }\n    alreadyRegistered {\n      count\n      rows\n    }\n    }\n  }\n'];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(
	source: '\n  mutation ValidateSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    validateClinicalSubmissions(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }    \n    }\n    \n  }\n',
): (typeof documents)['\n  mutation ValidateSubmission(\n    $programShortName: String!\n    $submissionVersion: String!\n  ) {\n    validateClinicalSubmissions(\n      programShortName: $programShortName\n      version: $submissionVersion\n    ) {\n      programShortName\n      state\n      version\n      updatedAt\n      updatedBy\n      clinicalEntities {\n        clinicalType\n        batchName\n        creator\n        createdAt\n        stats {\n          noUpdate\n          new\n          updated\n          errorsFound\n        }\n        records {\n          row\n          fields {\n            name\n            value\n          }\n        }\n        dataUpdates {\n          row\n          field\n          newValue\n          oldValue\n          donorId\n        }\n        dataWarnings {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        dataErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n        schemaErrors {\n          message\n          row\n          field\n          value\n          donorId\n        }\n      }\n      fileErrors {\n        message\n        fileNames\n        code\n      }    \n    }\n    \n  }\n'];

export function gql(source: string) {
	return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
	TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
